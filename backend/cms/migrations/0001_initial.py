# Generated by Django 2.0.5 on 2018-05-21 03:28

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0019_delete_filter'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('canonical', models.URLField(blank=True, default='')),
                ('title_tag', models.CharField(blank=True, default='', max_length=255)),
                ('structured_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='json-ld Structured Data')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255)),
                ('meta_description', models.TextField(blank=True, default='')),
                ('meta_keywords', models.TextField(blank=True, default='')),
                ('og_title', models.CharField(blank=True, default='', max_length=255)),
                ('og_type', models.CharField(blank=True, default='', max_length=50)),
                ('og_url', models.URLField(blank=True, default='')),
                ('og_img', models.URLField(blank=True, default='')),
                ('og_description', models.TextField(blank=True, default='')),
                ('twitter_card', models.CharField(blank=True, default='', help_text='Type of Twitter card', max_length=50)),
                ('twitter_site', models.CharField(blank=True, default='', help_text='@name of publisher', max_length=50)),
                ('twitter_title', models.CharField(blank=True, default='', max_length=255)),
                ('twitter_description', models.CharField(blank=True, default='', max_length=200)),
                ('twitter_creator', models.CharField(blank=True, default='', help_text='@name of author', max_length=50)),
                ('twitter_image', models.CharField(blank=True, default='', help_text='Images must be at least 120x120px', max_length=255)),
                ('template_override', models.CharField(blank=True, default='', help_text='Load this specific page template', max_length=255)),
                ('body', wagtail.core.fields.RichTextField()),
                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ContentPageWithForm',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('canonical', models.URLField(blank=True, default='')),
                ('title_tag', models.CharField(blank=True, default='', max_length=255)),
                ('structured_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='json-ld Structured Data')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255)),
                ('meta_description', models.TextField(blank=True, default='')),
                ('meta_keywords', models.TextField(blank=True, default='')),
                ('og_title', models.CharField(blank=True, default='', max_length=255)),
                ('og_type', models.CharField(blank=True, default='', max_length=50)),
                ('og_url', models.URLField(blank=True, default='')),
                ('og_img', models.URLField(blank=True, default='')),
                ('og_description', models.TextField(blank=True, default='')),
                ('twitter_card', models.CharField(blank=True, default='', help_text='Type of Twitter card', max_length=50)),
                ('twitter_site', models.CharField(blank=True, default='', help_text='@name of publisher', max_length=50)),
                ('twitter_title', models.CharField(blank=True, default='', max_length=255)),
                ('twitter_description', models.CharField(blank=True, default='', max_length=200)),
                ('twitter_creator', models.CharField(blank=True, default='', help_text='@name of author', max_length=50)),
                ('twitter_image', models.CharField(blank=True, default='', help_text='Images must be at least 120x120px', max_length=255)),
                ('template_override', models.CharField(blank=True, default='', help_text='Load this specific page template', max_length=255)),
                ('body', wagtail.core.fields.RichTextField()),
                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='cms.ContentPageWithForm')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='iFramePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('canonical', models.URLField(blank=True, default='')),
                ('title_tag', models.CharField(blank=True, default='', max_length=255)),
                ('structured_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='json-ld Structured Data')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255)),
                ('meta_description', models.TextField(blank=True, default='')),
                ('meta_keywords', models.TextField(blank=True, default='')),
                ('og_title', models.CharField(blank=True, default='', max_length=255)),
                ('og_type', models.CharField(blank=True, default='', max_length=50)),
                ('og_url', models.URLField(blank=True, default='')),
                ('og_img', models.URLField(blank=True, default='')),
                ('og_description', models.TextField(blank=True, default='')),
                ('twitter_card', models.CharField(blank=True, default='', help_text='Type of Twitter card', max_length=50)),
                ('twitter_site', models.CharField(blank=True, default='', help_text='@name of publisher', max_length=50)),
                ('twitter_title', models.CharField(blank=True, default='', max_length=255)),
                ('twitter_description', models.CharField(blank=True, default='', max_length=200)),
                ('twitter_creator', models.CharField(blank=True, default='', help_text='@name of author', max_length=50)),
                ('twitter_image', models.CharField(blank=True, default='', help_text='Images must be at least 120x120px', max_length=255)),
                ('template_override', models.CharField(blank=True, default='', help_text='Load this specific page template', max_length=255)),
                ('iframe_code', models.TextField(blank=True, default='', help_text='The full HTML code for the iframe embed')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='LinkLibraryLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('link_description', wagtail.core.fields.RichTextField(blank=True, default='')),
                ('link_title', models.CharField(max_length=255)),
                ('image', models.ForeignKey(blank=True, help_text='Will add a structured data "logo" element', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LinkLibraryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('canonical', models.URLField(blank=True, default='')),
                ('title_tag', models.CharField(blank=True, default='', max_length=255)),
                ('structured_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='json-ld Structured Data')),
                ('meta_title', models.CharField(blank=True, default='', max_length=255)),
                ('meta_description', models.TextField(blank=True, default='')),
                ('meta_keywords', models.TextField(blank=True, default='')),
                ('og_title', models.CharField(blank=True, default='', max_length=255)),
                ('og_type', models.CharField(blank=True, default='', max_length=50)),
                ('og_url', models.URLField(blank=True, default='')),
                ('og_img', models.URLField(blank=True, default='')),
                ('og_description', models.TextField(blank=True, default='')),
                ('twitter_card', models.CharField(blank=True, default='', help_text='Type of Twitter card', max_length=50)),
                ('twitter_site', models.CharField(blank=True, default='', help_text='@name of publisher', max_length=50)),
                ('twitter_title', models.CharField(blank=True, default='', max_length=255)),
                ('twitter_description', models.CharField(blank=True, default='', max_length=200)),
                ('twitter_creator', models.CharField(blank=True, default='', help_text='@name of author', max_length=50)),
                ('twitter_image', models.CharField(blank=True, default='', help_text='Images must be at least 120x120px', max_length=255)),
                ('template_override', models.CharField(blank=True, default='', help_text='Load this specific page template', max_length=255)),
                ('body', wagtail.core.fields.RichTextField()),
                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ProxyPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='QuickLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('link_description', wagtail.core.fields.RichTextField(blank=True, default='')),
                ('link_title', models.CharField(max_length=255)),
                ('image', models.ForeignKey(blank=True, help_text='Will add a structured data "logo" element', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuickLinkSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RobotsTxtSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('robots_txt', models.TextField(blank=True, default='', help_text='Content of your robots.txt file')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'robots.txt',
            },
        ),
        migrations.CreateModel(
            name='SEOSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_contact_number', models.CharField(blank=True, default='', max_length=25)),
                ('customer_contact_type', models.CharField(blank=True, choices=[('customer service', 'Customer Service'), ('technical support', 'Technical Support'), ('billing support', 'Billing Support'), ('bill payment', 'Bill Payment'), ('sales', 'Sales'), ('reservations', 'Reservations'), ('credit card support', 'Credit Card Support'), ('emergency', 'Emergency'), ('baggage tracking', 'Baggage Tracking'), ('roadside assistance', 'Roadside Assistance'), ('package tracking', 'Package Tracking')], default='', help_text='Combined with Contact Number, will add "Organisation" structured data', max_length=50)),
                ('organisation_address', models.CharField(blank=True, default='', help_text="Address to display in the Google 'smart result' box", max_length=150)),
                ('organisation_email', models.EmailField(blank=True, default='', help_text='General email address', max_length=254)),
                ('organisation_name', models.CharField(blank=True, default='', max_length=255)),
                ('logo', models.ForeignKey(blank=True, help_text='Will add a structured data "logo" element', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialMediaSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_url', models.URLField(blank=True, default='')),
                ('linkedin_url', models.URLField(blank=True, default='')),
                ('instagram_handle', models.CharField(blank=True, default='', help_text='Your Instagram username, without the @', max_length=50)),
                ('twitter_handle', models.CharField(blank=True, default='', help_text='Your Twitter username, without the @', max_length=50)),
                ('youtube_url', models.URLField(blank=True, default='')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ThirdPartyApiSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_maps', models.CharField(blank=True, default='', help_text='Your Google maps API key', max_length=255)),
                ('google_analytics', models.CharField(blank=True, default='', help_text='Your Google Analytics property/tracking ID. Formatted as UA-XXXXX-Y', max_length=50)),
                ('google_tag_manager', models.CharField(blank=True, default='', help_text='Your Google Tag Manager container ID. Formatted as GTM-XXXX', max_length=50)),
                ('facebook_pixel_id', models.CharField(blank=True, default='', help_text='The ID from your facebook pixel code. Can be found in the "fbq(\'init\',<CODE>)" of the pixel code', max_length=50)),
                ('mandrill', models.CharField(blank=True, default='', help_text='Your Mandrill API key', max_length=255)),
                ('mailgun', models.CharField(blank=True, default='', help_text='Your Mailgun API key', max_length=255)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='quicklink',
            name='setting',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='cms.QuickLinkSettings'),
        ),
        migrations.AddField(
            model_name='linklibrarylink',
            name='link_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='linklibrarylink',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='cms.LinkLibraryPage'),
        ),
    ]
